// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  games         Game[]
  answers       Answer[]
}

enum GameType {
  mcq
  open_ended
}

model Game {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(references: [id], fields: [userId], onDelete: Cascade)
  startedOn DateTime
  endedOn   DateTime?
  topic     String
  type      GameType
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
}

model Question {
  id            String   @id @default(uuid())
  question      String
  type          GameType
  options       Json? // store multiple options as JSON array for multiple-choice questions
  correctOption String? //index of the correct options in the 'options' array
  answer        String? //answer for open-ended questions
  game          Game?    @relation(fields: [gameId], references: [id])
  gameId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userAnswer    Answer?

  @@index([gameId])
}

model Answer {
  id                String   @id @default(uuid())
  percentageCorrect Float?
  answer            String?
  correct           Boolean?
  questionId        String   @unique
  question          Question @relation(references: [id], fields: [questionId], onDelete: Cascade)
  userId            String
  user              User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([questionId, userId])
}
